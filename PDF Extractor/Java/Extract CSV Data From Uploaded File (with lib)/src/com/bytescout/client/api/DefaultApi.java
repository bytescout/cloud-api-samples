/*
 * bytescout.io
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2017-05-11T04:47:23Z
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.bytescout.client.api;

import com.bytescout.client.ApiCallback;
import com.bytescout.client.ApiClient;
import com.bytescout.client.ApiException;
import com.bytescout.client.ApiResponse;
import com.bytescout.client.Configuration;
import com.bytescout.client.Pair;
import com.bytescout.client.ProgressRequestBody;
import com.bytescout.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.bytescout.client.model.BarcodeReaderResponseModel;
import com.bytescout.client.model.Empty;
import com.bytescout.client.model.FileUploadBase64RequestModel;
import com.bytescout.client.model.JobSingleResponseModel;
import com.bytescout.client.model.MultiResponseModel;
import com.bytescout.client.model.PdfInfoResponseModel;
import com.bytescout.client.model.PdfSignRequestModel;
import com.bytescout.client.model.PresignedUrlResponseModel;
import com.bytescout.client.model.SingleResponseModel;
import com.bytescout.client.model.Text;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for barcodeGenerateGet */
    private com.squareup.okhttp.Call barcodeGenerateGetCall(String name, String type, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/generate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGenerateGetValidateBeforeCall(String name, String type, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeGenerateGetCall(name, type, value, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Barcode generation via GET request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel barcodeGenerateGet(String name, String type, String value) throws ApiException {
        ApiResponse<SingleResponseModel> resp = barcodeGenerateGetWithHttpInfo(name, type, value);
        return resp.getData();
    }

    /**
     * 
     * Barcode generation via GET request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> barcodeGenerateGetWithHttpInfo(String name, String type, String value) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGenerateGetValidateBeforeCall(name, type, value, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Barcode generation via GET request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGenerateGetAsync(String name, String type, String value, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGenerateGetValidateBeforeCall(name, type, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for barcodeGenerateOptions */
    private com.squareup.okhttp.Call barcodeGenerateOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/generate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGenerateOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeGenerateOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty barcodeGenerateOptions() throws ApiException {
        ApiResponse<Empty> resp = barcodeGenerateOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> barcodeGenerateOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = barcodeGenerateOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGenerateOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGenerateOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for barcodeGeneratePost */
    private com.squareup.okhttp.Call barcodeGeneratePostCall(String name, String type, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/generate".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "value", value));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGeneratePostValidateBeforeCall(String name, String type, String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeGeneratePostCall(name, type, value, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Barcode generation via POST request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel barcodeGeneratePost(String name, String type, String value) throws ApiException {
        ApiResponse<SingleResponseModel> resp = barcodeGeneratePostWithHttpInfo(name, type, value);
        return resp.getData();
    }

    /**
     * 
     * Barcode generation via POST request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> barcodeGeneratePostWithHttpInfo(String name, String type, String value) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGeneratePostValidateBeforeCall(name, type, value, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Barcode generation via POST request.
     * @param name Filename for the generated image. (optional)
     * @param type Barcode type. Valid values: Code128, Code39, Postnet, UPCA, EAN8, ISBN, Codabar, I2of5, Code93, EAN13, JAN13, Bookland, UPCE, PDF417, PDF417Truncated, DataMatrix, QRCode, Aztec, Planet, EAN128, GS1_128, USPSSackLabel, USPSTrayLabel, DeutschePostIdentcode, DeutschePostLeitcode, Numly, PZN, OpticalProduct, SwissPostParcel, RoyalMail, DutchKix, SingaporePostalCode, EAN2, EAN5, EAN14, MacroPDF417, MicroPDF417, GS1_DataMatrix, Telepen, IntelligentMail, GS1_DataBar_Omnidirectional, GS1_DataBar_Truncated, GS1_DataBar_Stacked, GS1_DataBar_Stacked_Omnidirectional, GS1_DataBar_Limited, GS1_DataBar_Expanded, GS1_DataBar_Expanded_Stacked, MaxiCode, Plessey, MSI, ITF14, GTIN12, GTIN8, GTIN13, GTIN14. (optional)
     * @param value Barcode value. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGeneratePostAsync(String name, String type, String value, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGeneratePostValidateBeforeCall(name, type, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for barcodeReadFromUrlGet */
    private com.squareup.okhttp.Call barcodeReadFromUrlGetCall(String types, String pages, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/read/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (types != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "types", types));
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeReadFromUrlGetValidateBeforeCall(String types, String pages, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeReadFromUrlGetCall(types, pages, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Read barcodes via GET request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @return BarcodeReaderResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodeReaderResponseModel barcodeReadFromUrlGet(String types, String pages, String url) throws ApiException {
        ApiResponse<BarcodeReaderResponseModel> resp = barcodeReadFromUrlGetWithHttpInfo(types, pages, url);
        return resp.getData();
    }

    /**
     * 
     * Read barcodes via GET request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @return ApiResponse&lt;BarcodeReaderResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodeReaderResponseModel> barcodeReadFromUrlGetWithHttpInfo(String types, String pages, String url) throws ApiException {
        com.squareup.okhttp.Call call = barcodeReadFromUrlGetValidateBeforeCall(types, pages, url, null, null);
        Type localVarReturnType = new TypeToken<BarcodeReaderResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read barcodes via GET request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeReadFromUrlGetAsync(String types, String pages, String url, final ApiCallback<BarcodeReaderResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeReadFromUrlGetValidateBeforeCall(types, pages, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodeReaderResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for barcodeReadFromUrlOptions */
    private com.squareup.okhttp.Call barcodeReadFromUrlOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/read/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeReadFromUrlOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeReadFromUrlOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty barcodeReadFromUrlOptions() throws ApiException {
        ApiResponse<Empty> resp = barcodeReadFromUrlOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> barcodeReadFromUrlOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = barcodeReadFromUrlOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeReadFromUrlOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeReadFromUrlOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for barcodeReadFromUrlPost */
    private com.squareup.okhttp.Call barcodeReadFromUrlPostCall(String types, String pages, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/barcode/read/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (types != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "types", types));
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeReadFromUrlPostValidateBeforeCall(String types, String pages, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = barcodeReadFromUrlPostCall(types, pages, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Read barcodes via POST request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @return BarcodeReaderResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BarcodeReaderResponseModel barcodeReadFromUrlPost(String types, String pages, String url) throws ApiException {
        ApiResponse<BarcodeReaderResponseModel> resp = barcodeReadFromUrlPostWithHttpInfo(types, pages, url);
        return resp.getData();
    }

    /**
     * 
     * Read barcodes via POST request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @return ApiResponse&lt;BarcodeReaderResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BarcodeReaderResponseModel> barcodeReadFromUrlPostWithHttpInfo(String types, String pages, String url) throws ApiException {
        com.squareup.okhttp.Call call = barcodeReadFromUrlPostValidateBeforeCall(types, pages, url, null, null);
        Type localVarReturnType = new TypeToken<BarcodeReaderResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Read barcodes via POST request.
     * @param types Comma-separated list of barcode types to decode. Valid types: AustralianPostCode, Aztec, CircularI2of5, Codabar, CodablockF, Code128, Code16K, Code39, Code39Extended, Code39Mod43, Code39Mod43Extended, Code93, DataMatrix, EAN13, EAN2, EAN5, EAN8, GS1, GS1DataBarExpanded, GS1DataBarExpandedStacked, GS1DataBarLimited, GS1DataBarOmnidirectional, GS1DataBarStacked, GTIN12, GTIN13, GTIN14, GTIN8, IntelligentMail, Interleaved2of5, ITF14, MaxiCode, MICR, MicroPDF, MSI, PatchCode, PDF417, Pharmacode, PostNet, PZN, QRCode, RoyalMail, RoyalMailKIX, Trioptic, UPCA, UPCE, UPU. (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param url URL of the image to decode barcodes from. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeReadFromUrlPostAsync(String types, String pages, String url, final ApiCallback<BarcodeReaderResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeReadFromUrlPostValidateBeforeCall(types, pages, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BarcodeReaderResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fileUploadBase64Options */
    private com.squareup.okhttp.Call fileUploadBase64OptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/file/upload/base64".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fileUploadBase64OptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = fileUploadBase64OptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty fileUploadBase64Options() throws ApiException {
        ApiResponse<Empty> resp = fileUploadBase64OptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> fileUploadBase64OptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = fileUploadBase64OptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fileUploadBase64OptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fileUploadBase64OptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fileUploadBase64Post */
    private com.squareup.okhttp.Call fileUploadBase64PostCall(FileUploadBase64RequestModel fileUploadBase64RequestModel, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileUploadBase64RequestModel;
        
        // create path and map variables
        String localVarPath = "/file/upload/base64".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fileUploadBase64PostValidateBeforeCall(FileUploadBase64RequestModel fileUploadBase64RequestModel, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fileUploadBase64RequestModel' is set
        if (fileUploadBase64RequestModel == null) {
            throw new ApiException("Missing the required parameter 'fileUploadBase64RequestModel' when calling fileUploadBase64Post(Async)");
        }
        
        
        com.squareup.okhttp.Call call = fileUploadBase64PostCall(fileUploadBase64RequestModel, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Upload a file to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param fileUploadBase64RequestModel  (required)
     * @param name The name the file will be stored with. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel fileUploadBase64Post(FileUploadBase64RequestModel fileUploadBase64RequestModel, String name) throws ApiException {
        ApiResponse<SingleResponseModel> resp = fileUploadBase64PostWithHttpInfo(fileUploadBase64RequestModel, name);
        return resp.getData();
    }

    /**
     * 
     * Upload a file to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param fileUploadBase64RequestModel  (required)
     * @param name The name the file will be stored with. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> fileUploadBase64PostWithHttpInfo(FileUploadBase64RequestModel fileUploadBase64RequestModel, String name) throws ApiException {
        com.squareup.okhttp.Call call = fileUploadBase64PostValidateBeforeCall(fileUploadBase64RequestModel, name, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a file to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param fileUploadBase64RequestModel  (required)
     * @param name The name the file will be stored with. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fileUploadBase64PostAsync(FileUploadBase64RequestModel fileUploadBase64RequestModel, String name, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fileUploadBase64PostValidateBeforeCall(fileUploadBase64RequestModel, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fileUploadGetPresignedUrlGet */
    private com.squareup.okhttp.Call fileUploadGetPresignedUrlGetCall(String contenttype, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/file/upload/get-presigned-url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (contenttype != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "contenttype", contenttype));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fileUploadGetPresignedUrlGetValidateBeforeCall(String contenttype, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlGetCall(contenttype, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets preassigned URL for binary file upload to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param contenttype Content-Type describing the data contained in the request body, Use &#39;binary/octet-stream&#39;. (optional)
     * @param name The name the file will be stored with. (optional)
     * @return PresignedUrlResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PresignedUrlResponseModel fileUploadGetPresignedUrlGet(String contenttype, String name) throws ApiException {
        ApiResponse<PresignedUrlResponseModel> resp = fileUploadGetPresignedUrlGetWithHttpInfo(contenttype, name);
        return resp.getData();
    }

    /**
     * 
     * Gets preassigned URL for binary file upload to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param contenttype Content-Type describing the data contained in the request body, Use &#39;binary/octet-stream&#39;. (optional)
     * @param name The name the file will be stored with. (optional)
     * @return ApiResponse&lt;PresignedUrlResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PresignedUrlResponseModel> fileUploadGetPresignedUrlGetWithHttpInfo(String contenttype, String name) throws ApiException {
        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlGetValidateBeforeCall(contenttype, name, null, null);
        Type localVarReturnType = new TypeToken<PresignedUrlResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets preassigned URL for binary file upload to the cloud to use in other API methods. Uploaded files are automatically deleted after 1 hour.
     * @param contenttype Content-Type describing the data contained in the request body, Use &#39;binary/octet-stream&#39;. (optional)
     * @param name The name the file will be stored with. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fileUploadGetPresignedUrlGetAsync(String contenttype, String name, final ApiCallback<PresignedUrlResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlGetValidateBeforeCall(contenttype, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PresignedUrlResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for fileUploadGetPresignedUrlOptions */
    private com.squareup.okhttp.Call fileUploadGetPresignedUrlOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/file/upload/get-presigned-url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fileUploadGetPresignedUrlOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty fileUploadGetPresignedUrlOptions() throws ApiException {
        ApiResponse<Empty> resp = fileUploadGetPresignedUrlOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> fileUploadGetPresignedUrlOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fileUploadGetPresignedUrlOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fileUploadGetPresignedUrlOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromCsvGet */
    private com.squareup.okhttp.Call pdfConvertFromCsvGetCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromCsvGetValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromCsvGetCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * CSV to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertFromCsvGet(String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertFromCsvGetWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * CSV to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertFromCsvGetWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromCsvGetValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CSV to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromCsvGetAsync(String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromCsvGetValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromCsvOptions */
    private com.squareup.okhttp.Call pdfConvertFromCsvOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromCsvOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromCsvOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertFromCsvOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertFromCsvOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertFromCsvOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromCsvOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromCsvOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromCsvOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromCsvPost */
    private com.squareup.okhttp.Call pdfConvertFromCsvPostCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromCsvPostValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromCsvPostCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * CSV to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertFromCsvPost(String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertFromCsvPostWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * CSV to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertFromCsvPostWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromCsvPostValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * CSV to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source CSV file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromCsvPostAsync(String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromCsvPostValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromHtmlOptions */
    private com.squareup.okhttp.Call pdfConvertFromHtmlOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromHtmlOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromHtmlOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertFromHtmlOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertFromHtmlOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertFromHtmlOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromHtmlOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromHtmlOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromHtmlOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromHtmlPost */
    private com.squareup.okhttp.Call pdfConvertFromHtmlPostCall(Text text, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = text;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromHtmlPostValidateBeforeCall(Text text, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling pdfConvertFromHtmlPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = pdfConvertFromHtmlPostCall(text, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * HTML to PDF conversion via POST request.
     * @param text HTML data to convert to PDF. (required)
     * @param name File name for the generated result. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertFromHtmlPost(Text text, String name) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertFromHtmlPostWithHttpInfo(text, name);
        return resp.getData();
    }

    /**
     * 
     * HTML to PDF conversion via POST request.
     * @param text HTML data to convert to PDF. (required)
     * @param name File name for the generated result. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertFromHtmlPostWithHttpInfo(Text text, String name) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromHtmlPostValidateBeforeCall(text, name, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * HTML to PDF conversion via POST request.
     * @param text HTML data to convert to PDF. (required)
     * @param name File name for the generated result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromHtmlPostAsync(Text text, String name, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromHtmlPostValidateBeforeCall(text, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromImageGet */
    private com.squareup.okhttp.Call pdfConvertFromImageGetCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/image".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromImageGetValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromImageGetCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Image to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @return JobSingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobSingleResponseModel pdfConvertFromImageGet(String name, String url) throws ApiException {
        ApiResponse<JobSingleResponseModel> resp = pdfConvertFromImageGetWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * Image to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @return ApiResponse&lt;JobSingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobSingleResponseModel> pdfConvertFromImageGetWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromImageGetValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<JobSingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Image to PDF conversion via GET request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromImageGetAsync(String name, String url, final ApiCallback<JobSingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromImageGetValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobSingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromImageOptions */
    private com.squareup.okhttp.Call pdfConvertFromImageOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/image".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromImageOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromImageOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertFromImageOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertFromImageOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertFromImageOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromImageOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromImageOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromImageOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromImagePost */
    private com.squareup.okhttp.Call pdfConvertFromImagePostCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/image".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromImagePostValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromImagePostCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Image to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @return JobSingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JobSingleResponseModel pdfConvertFromImagePost(String name, String url) throws ApiException {
        ApiResponse<JobSingleResponseModel> resp = pdfConvertFromImagePostWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * Image to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @return ApiResponse&lt;JobSingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JobSingleResponseModel> pdfConvertFromImagePostWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromImagePostValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<JobSingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Image to PDF conversion via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the source image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromImagePostAsync(String name, String url, final ApiCallback<JobSingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromImagePostValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobSingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromUrlGet */
    private com.squareup.okhttp.Call pdfConvertFromUrlGetCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromUrlGetValidateBeforeCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromUrlGetCall(url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Saves a web page to PDF document via GET request.
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertFromUrlGet(String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertFromUrlGetWithHttpInfo(url);
        return resp.getData();
    }

    /**
     * 
     * Saves a web page to PDF document via GET request.
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertFromUrlGetWithHttpInfo(String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromUrlGetValidateBeforeCall(url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Saves a web page to PDF document via GET request.
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromUrlGetAsync(String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromUrlGetValidateBeforeCall(url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromUrlOptions */
    private com.squareup.okhttp.Call pdfConvertFromUrlOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromUrlOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromUrlOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertFromUrlOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertFromUrlOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertFromUrlOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromUrlOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromUrlOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromUrlOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertFromUrlPost */
    private com.squareup.okhttp.Call pdfConvertFromUrlPostCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/from/url".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertFromUrlPostValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertFromUrlPostCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Saves a web page to PDF document via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertFromUrlPost(String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertFromUrlPostWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * Saves a web page to PDF document via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertFromUrlPostWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertFromUrlPostValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Saves a web page to PDF document via POST request.
     * @param name File name for the generated result. (optional)
     * @param url URL of the web page to be saved as PDF document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertFromUrlPostAsync(String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertFromUrlPostValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToCsvGet */
    private com.squareup.okhttp.Call pdfConvertToCsvGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToCsvGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToCsvGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to CSV conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToCsvGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToCsvGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to CSV conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToCsvGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToCsvGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to CSV conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToCsvGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToCsvGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToCsvOptions */
    private com.squareup.okhttp.Call pdfConvertToCsvOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToCsvOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToCsvOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToCsvOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToCsvOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToCsvOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToCsvOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToCsvOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToCsvOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToCsvPost */
    private com.squareup.okhttp.Call pdfConvertToCsvPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/csv".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToCsvPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToCsvPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to CSV conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToCsvPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToCsvPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to CSV conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToCsvPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToCsvPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to CSV conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToCsvPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToCsvPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToHtmlGet */
    private com.squareup.okhttp.Call pdfConvertToHtmlGetCall(String simple, String columns, String url, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (simple != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "simple", simple));
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToHtmlGetValidateBeforeCall(String simple, String columns, String url, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToHtmlGetCall(simple, columns, url, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to HTML conversion via GET request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToHtmlGet(String simple, String columns, String url, String name) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToHtmlGetWithHttpInfo(simple, columns, url, name);
        return resp.getData();
    }

    /**
     * 
     * PDF to HTML conversion via GET request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToHtmlGetWithHttpInfo(String simple, String columns, String url, String name) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToHtmlGetValidateBeforeCall(simple, columns, url, name, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to HTML conversion via GET request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToHtmlGetAsync(String simple, String columns, String url, String name, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToHtmlGetValidateBeforeCall(simple, columns, url, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToHtmlOptions */
    private com.squareup.okhttp.Call pdfConvertToHtmlOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToHtmlOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToHtmlOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToHtmlOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToHtmlOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToHtmlOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToHtmlOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToHtmlOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToHtmlOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToHtmlPost */
    private com.squareup.okhttp.Call pdfConvertToHtmlPostCall(String simple, String columns, String url, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/html".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (simple != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "simple", simple));
        if (columns != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "columns", columns));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToHtmlPostValidateBeforeCall(String simple, String columns, String url, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToHtmlPostCall(simple, columns, url, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to HTML conversion via POST request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToHtmlPost(String simple, String columns, String url, String name) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToHtmlPostWithHttpInfo(simple, columns, url, name);
        return resp.getData();
    }

    /**
     * 
     * PDF to HTML conversion via POST request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToHtmlPostWithHttpInfo(String simple, String columns, String url, String name) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToHtmlPostValidateBeforeCall(simple, columns, url, name, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to HTML conversion via POST request.
     * @param simple Set &#39;true&#39; to convert to a plain HTML format. Default is the rich HTML &amp; CSS format keeping the document design. (optional)
     * @param columns Set &#39;true&#39; if the PDF document is arranged in columns like a newspaper. Default is &#39;false&#39;. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToHtmlPostAsync(String simple, String columns, String url, String name, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToHtmlPostValidateBeforeCall(simple, columns, url, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJpgGet */
    private com.squareup.okhttp.Call pdfConvertToJpgGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/jpg".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJpgGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJpgGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to JPEG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfConvertToJpgGet(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfConvertToJpgGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to JPEG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfConvertToJpgGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJpgGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to JPEG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJpgGetAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJpgGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJpgOptions */
    private com.squareup.okhttp.Call pdfConvertToJpgOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/jpg".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJpgOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJpgOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToJpgOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToJpgOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToJpgOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJpgOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJpgOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJpgOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJpgPost */
    private com.squareup.okhttp.Call pdfConvertToJpgPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/jpg".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJpgPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJpgPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to JPEG image conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfConvertToJpgPost(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfConvertToJpgPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to JPEG image conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfConvertToJpgPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJpgPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to JPEG image conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJpgPostAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJpgPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJsonGet */
    private com.squareup.okhttp.Call pdfConvertToJsonGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJsonGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJsonGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to JSON conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToJsonGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToJsonGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to JSON conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToJsonGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJsonGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to JSON conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJsonGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJsonGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJsonOptions */
    private com.squareup.okhttp.Call pdfConvertToJsonOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJsonOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJsonOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToJsonOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToJsonOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToJsonOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJsonOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJsonOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJsonOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToJsonPost */
    private com.squareup.okhttp.Call pdfConvertToJsonPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/json".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToJsonPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToJsonPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to JSON conversion get view POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToJsonPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToJsonPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to JSON conversion get view POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToJsonPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToJsonPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to JSON conversion get view POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToJsonPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToJsonPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToPngGet */
    private com.squareup.okhttp.Call pdfConvertToPngGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/png".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToPngGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToPngGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to PNG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfConvertToPngGet(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfConvertToPngGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to PNG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfConvertToPngGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToPngGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to PNG image conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToPngGetAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToPngGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToPngOptions */
    private com.squareup.okhttp.Call pdfConvertToPngOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/png".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToPngOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToPngOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToPngOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToPngOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToPngOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToPngOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToPngOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToPngOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToPngPost */
    private com.squareup.okhttp.Call pdfConvertToPngPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/png".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToPngPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToPngPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to PNG image conversion convert via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfConvertToPngPost(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfConvertToPngPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to PNG image conversion convert via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfConvertToPngPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToPngPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to PNG image conversion convert via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToPngPostAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToPngPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTextGet */
    private com.squareup.okhttp.Call pdfConvertToTextGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/text".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTextGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTextGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to plain text conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToTextGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToTextGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to plain text conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToTextGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTextGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to plain text conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTextGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTextGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTextOptions */
    private com.squareup.okhttp.Call pdfConvertToTextOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/text".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTextOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTextOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToTextOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToTextOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToTextOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTextOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTextOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTextOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTextPost */
    private com.squareup.okhttp.Call pdfConvertToTextPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/text".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTextPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTextPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to plain text conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToTextPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToTextPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to plain text conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToTextPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTextPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to plain text conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTextPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTextPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTiffGet */
    private com.squareup.okhttp.Call pdfConvertToTiffGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/tiff".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTiffGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTiffGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to TIFF image (single or multi-page) conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToTiffGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToTiffGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to TIFF image (single or multi-page) conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToTiffGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTiffGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to TIFF image (single or multi-page) conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTiffGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTiffGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTiffOptions */
    private com.squareup.okhttp.Call pdfConvertToTiffOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/tiff".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTiffOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTiffOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToTiffOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToTiffOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToTiffOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTiffOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTiffOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTiffOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToTiffPost */
    private com.squareup.okhttp.Call pdfConvertToTiffPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/tiff".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToTiffPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToTiffPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to TIFF image (single or multi-page) conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToTiffPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToTiffPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to TIFF image (single or multi-page) conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToTiffPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToTiffPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to TIFF image (single or multi-page) conversion via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToTiffPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToTiffPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsGet */
    private com.squareup.okhttp.Call pdfConvertToXlsGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xls".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to XLS conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToXlsGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToXlsGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to XLS conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToXlsGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to XLS conversion via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsOptions */
    private com.squareup.okhttp.Call pdfConvertToXlsOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xls".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToXlsOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToXlsOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToXlsOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsPost */
    private com.squareup.okhttp.Call pdfConvertToXlsPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xls".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * PDF to XLS conversion via POST request.
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToXlsPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToXlsPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * PDF to XLS conversion via POST request.
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToXlsPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * PDF to XLS conversion via POST request.
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsxGet */
    private com.squareup.okhttp.Call pdfConvertToXlsxGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xlsx".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsxGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsxGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToXlsxGet(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToXlsxGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToXlsxGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsxGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name File name for generated result. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsxGetAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsxGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsxOptions */
    private com.squareup.okhttp.Call pdfConvertToXlsxOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xlsx".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsxOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsxOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfConvertToXlsxOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfConvertToXlsxOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfConvertToXlsxOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsxOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsxOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsxOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfConvertToXlsxPost */
    private com.squareup.okhttp.Call pdfConvertToXlsxPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/convert/to/xlsx".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfConvertToXlsxPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfConvertToXlsxPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfConvertToXlsxPost(String pages, String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfConvertToXlsxPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfConvertToXlsxPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfConvertToXlsxPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pages  (optional)
     * @param name  (optional)
     * @param url  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfConvertToXlsxPostAsync(String pages, String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfConvertToXlsxPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfInfoGet */
    private com.squareup.okhttp.Call pdfInfoGetCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/info".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfInfoGetValidateBeforeCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfInfoGetCall(url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets PDF document information via GET request.
     * @param url URL of the source PDF file. (optional)
     * @return PdfInfoResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfInfoResponseModel pdfInfoGet(String url) throws ApiException {
        ApiResponse<PdfInfoResponseModel> resp = pdfInfoGetWithHttpInfo(url);
        return resp.getData();
    }

    /**
     * 
     * Gets PDF document information via GET request.
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;PdfInfoResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfInfoResponseModel> pdfInfoGetWithHttpInfo(String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfInfoGetValidateBeforeCall(url, null, null);
        Type localVarReturnType = new TypeToken<PdfInfoResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets PDF document information via GET request.
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfInfoGetAsync(String url, final ApiCallback<PdfInfoResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfInfoGetValidateBeforeCall(url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfInfoResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfInfoOptions */
    private com.squareup.okhttp.Call pdfInfoOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/info".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfInfoOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfInfoOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfInfoOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfInfoOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfInfoOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfInfoOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfInfoOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfInfoOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfInfoPost */
    private com.squareup.okhttp.Call pdfInfoPostCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/info".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfInfoPostValidateBeforeCall(String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfInfoPostCall(url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Gets PDF document information via POST request.
     * @param url URL of the source PDF file. (optional)
     * @return PdfInfoResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PdfInfoResponseModel pdfInfoPost(String url) throws ApiException {
        ApiResponse<PdfInfoResponseModel> resp = pdfInfoPostWithHttpInfo(url);
        return resp.getData();
    }

    /**
     * 
     * Gets PDF document information via POST request.
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;PdfInfoResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PdfInfoResponseModel> pdfInfoPostWithHttpInfo(String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfInfoPostValidateBeforeCall(url, null, null);
        Type localVarReturnType = new TypeToken<PdfInfoResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets PDF document information via POST request.
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfInfoPostAsync(String url, final ApiCallback<PdfInfoResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfInfoPostValidateBeforeCall(url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PdfInfoResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfMergeGet */
    private com.squareup.okhttp.Call pdfMergeGetCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/merge".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfMergeGetValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfMergeGetCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Merge two PDF documents via GET request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfMergeGet(String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfMergeGetWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * Merge two PDF documents via GET request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfMergeGetWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfMergeGetValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Merge two PDF documents via GET request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfMergeGetAsync(String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfMergeGetValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfMergeOptions */
    private com.squareup.okhttp.Call pdfMergeOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/merge".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfMergeOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfMergeOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfMergeOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfMergeOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfMergeOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfMergeOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfMergeOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfMergeOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfMergePost */
    private com.squareup.okhttp.Call pdfMergePostCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/merge".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfMergePostValidateBeforeCall(String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfMergePostCall(name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Merge two PDF documents via POST request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfMergePost(String name, String url) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfMergePostWithHttpInfo(name, url);
        return resp.getData();
    }

    /**
     * 
     * Merge two PDF documents via POST request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfMergePostWithHttpInfo(String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfMergePostValidateBeforeCall(name, url, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Merge two PDF documents via POST request.
     * @param name File name for generated result. (optional)
     * @param url Comma-separated list of URLs of source PDF files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfMergePostAsync(String name, String url, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfMergePostValidateBeforeCall(name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSignGet */
    private com.squareup.okhttp.Call pdfSignGetCall(String width, String url, String name, String y, String x, String height, String pages, String urlimage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/sign".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (y != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "y", y));
        if (x != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "x", x));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (urlimage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "urlimage", urlimage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSignGetValidateBeforeCall(String width, String url, String name, String y, String x, String height, String pages, String urlimage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfSignGetCall(width, url, name, y, x, height, pages, urlimage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Sign PDF document via GET request.
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfSignGet(String width, String url, String name, String y, String x, String height, String pages, String urlimage) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfSignGetWithHttpInfo(width, url, name, y, x, height, pages, urlimage);
        return resp.getData();
    }

    /**
     * 
     * Sign PDF document via GET request.
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfSignGetWithHttpInfo(String width, String url, String name, String y, String x, String height, String pages, String urlimage) throws ApiException {
        com.squareup.okhttp.Call call = pdfSignGetValidateBeforeCall(width, url, name, y, x, height, pages, urlimage, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sign PDF document via GET request.
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSignGetAsync(String width, String url, String name, String y, String x, String height, String pages, String urlimage, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSignGetValidateBeforeCall(width, url, name, y, x, height, pages, urlimage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSignOptions */
    private com.squareup.okhttp.Call pdfSignOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/sign".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSignOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfSignOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfSignOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfSignOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfSignOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfSignOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSignOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSignOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSignPost */
    private com.squareup.okhttp.Call pdfSignPostCall(PdfSignRequestModel pdfSignRequestModel, String width, String text, String url, String name, String type, String y, String fontname, String x, String height, String pages, String color, String urlimage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = pdfSignRequestModel;
        
        // create path and map variables
        String localVarPath = "/pdf/sign".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "width", width));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "text", text));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "type", type));
        if (y != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "y", y));
        if (fontname != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fontname", fontname));
        if (x != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "x", x));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "height", height));
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (color != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "color", color));
        if (urlimage != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "urlimage", urlimage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSignPostValidateBeforeCall(PdfSignRequestModel pdfSignRequestModel, String width, String text, String url, String name, String type, String y, String fontname, String x, String height, String pages, String color, String urlimage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'pdfSignRequestModel' is set
        if (pdfSignRequestModel == null) {
            throw new ApiException("Missing the required parameter 'pdfSignRequestModel' when calling pdfSignPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = pdfSignPostCall(pdfSignRequestModel, width, text, url, name, type, y, fontname, x, height, pages, color, urlimage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Sign PDF document via POST request.
     * @param pdfSignRequestModel  (required)
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param text Text of the signature of annotation type. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param type Type of the signature: &#39;image&#39; or &#39;annotation&#39;. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param fontname Font name for the signature of annotation type. (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param color Text color for the signature of annotation type. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @return SingleResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SingleResponseModel pdfSignPost(PdfSignRequestModel pdfSignRequestModel, String width, String text, String url, String name, String type, String y, String fontname, String x, String height, String pages, String color, String urlimage) throws ApiException {
        ApiResponse<SingleResponseModel> resp = pdfSignPostWithHttpInfo(pdfSignRequestModel, width, text, url, name, type, y, fontname, x, height, pages, color, urlimage);
        return resp.getData();
    }

    /**
     * 
     * Sign PDF document via POST request.
     * @param pdfSignRequestModel  (required)
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param text Text of the signature of annotation type. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param type Type of the signature: &#39;image&#39; or &#39;annotation&#39;. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param fontname Font name for the signature of annotation type. (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param color Text color for the signature of annotation type. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @return ApiResponse&lt;SingleResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SingleResponseModel> pdfSignPostWithHttpInfo(PdfSignRequestModel pdfSignRequestModel, String width, String text, String url, String name, String type, String y, String fontname, String x, String height, String pages, String color, String urlimage) throws ApiException {
        com.squareup.okhttp.Call call = pdfSignPostValidateBeforeCall(pdfSignRequestModel, width, text, url, name, type, y, fontname, x, height, pages, color, urlimage, null, null);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sign PDF document via POST request.
     * @param pdfSignRequestModel  (required)
     * @param width Width of the signature in PDF Points (1/72 in.). (optional)
     * @param text Text of the signature of annotation type. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param name File name for generated result. (optional)
     * @param type Type of the signature: &#39;image&#39; or &#39;annotation&#39;. (optional)
     * @param y Y coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param fontname Font name for the signature of annotation type. (optional)
     * @param x X coordinate of the signature in PDF Points (1/72 in.). (optional)
     * @param height Height of the signature in PDF Points (1/72 in.). (optional)
     * @param pages Comma-separated list of page indices (or ranges) to process. Leave empty for all pages. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param color Text color for the signature of annotation type. (optional)
     * @param urlimage URL of the signature image file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSignPostAsync(PdfSignRequestModel pdfSignRequestModel, String width, String text, String url, String name, String type, String y, String fontname, String x, String height, String pages, String color, String urlimage, final ApiCallback<SingleResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSignPostValidateBeforeCall(pdfSignRequestModel, width, text, url, name, type, y, fontname, x, height, pages, color, urlimage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SingleResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSplitGet */
    private com.squareup.okhttp.Call pdfSplitGetCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/split".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSplitGetValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfSplitGetCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Split PDF document via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfSplitGet(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfSplitGetWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * Split PDF document via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfSplitGetWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfSplitGetValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Split PDF document via GET request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSplitGetAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSplitGetValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSplitOptions */
    private com.squareup.okhttp.Call pdfSplitOptionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/split".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSplitOptionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfSplitOptionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return Empty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Empty pdfSplitOptions() throws ApiException {
        ApiResponse<Empty> resp = pdfSplitOptionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * OPTIONS is for internal purposes, please ingore.
     * @return ApiResponse&lt;Empty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Empty> pdfSplitOptionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = pdfSplitOptionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OPTIONS is for internal purposes, please ingore.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSplitOptionsAsync(final ApiCallback<Empty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSplitOptionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Empty>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for pdfSplitPost */
    private com.squareup.okhttp.Call pdfSplitPostCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/split".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (pages != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pages", pages));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (url != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "url", url));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfSplitPostValidateBeforeCall(String pages, String name, String url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = pdfSplitPostCall(pages, name, url, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Split PDF document via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return MultiResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultiResponseModel pdfSplitPost(String pages, String name, String url) throws ApiException {
        ApiResponse<MultiResponseModel> resp = pdfSplitPostWithHttpInfo(pages, name, url);
        return resp.getData();
    }

    /**
     * 
     * Split PDF document via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @return ApiResponse&lt;MultiResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultiResponseModel> pdfSplitPostWithHttpInfo(String pages, String name, String url) throws ApiException {
        com.squareup.okhttp.Call call = pdfSplitPostValidateBeforeCall(pages, name, url, null, null);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Split PDF document via POST request.
     * @param pages Comma-separated list of page indices (or ranges) to split to. Example: &#39;0,2-5,7-&#39;. (optional)
     * @param name Base file name for generated result files. (optional)
     * @param url URL of the source PDF file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfSplitPostAsync(String pages, String name, String url, final ApiCallback<MultiResponseModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfSplitPostValidateBeforeCall(pages, name, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultiResponseModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
